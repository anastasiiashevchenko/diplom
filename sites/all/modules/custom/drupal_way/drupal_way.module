<?php
/**
 * Defines
 */
//define('CONTACT_LOCATIONS_TOP_MENU', 'menu-top-menu');
/*$menu = menu_tree_output(menu_tree_all_data('main-menu'));
print drupal_render($menu);*/
/**
 * Implements hook_init().
 */
function drupal_way_init() {
  global $base_url, $theme_key;

  if ($theme_key == 'drupal_way' && drupal_is_front_page()) {
    drupal_add_library('drupal_way', 'nivo_slider');
    drupal_add_js(drupal_get_path('module', 'drupal_way') . '/js/drupal_way_nivo_slider.js');
  }
  drupal_add_library('drupal_way', 'jquery_localscroll');
  drupal_add_library('drupal_way', 'jquery_scrollto');
  drupal_add_library('drupal_way', 'fancybox');
  drupal_add_library('system', 'ui.accordion');
  //drupal_add_library('system', 'effects.highlight');

  //if (arg(0) != 'admin') {
    drupal_add_library('drupal_way', 'sceditor');
    drupal_add_js(drupal_get_path('module', 'drupal_way') . '/js/drupal_way.js');

    drupal_add_js(array('drupal_way' => array(
        'path_sceditor' => $base_url . '/' .libraries_get_path('sceditor'),
    )), 'setting');
  //}
}
/**
 * Implements hook_menu().
 */
function drupal_way_menu_alter(&$items) {
  unset($items['search/user/%menu_tail']);
  unset($items['search/node/%menu_tail ']);
  unset($items['search/user']);
  unset($items['search/node']);
  return $items;
}

/**
 * Implements hook_permission().
 */
function drupal_way_permission() {
  return array(
    'drupal way search page' => array(
      'title' => t('Drupal Way Search Page'),
    ),
  );
}

/**
 * Implements hook_css_alter().
 */
function drupal_way_css_alter(&$variables) {
  // Remove jquery.ui css style
  global $theme_key;

  if ($theme_key == 'drupal_way' && arg(0) != 'demo') {
    foreach ($variables as $key => $variable) {
      if (strstr($key, 'jquery.ui')) {
        unset($variables[$key]);
      }
    }
  }
}

/**
 * Implements hook_library().
 */
function drupal_way_library() {
  $nivo_slider_path = libraries_get_path('nivo_slider');
  $libraries['nivo_slider'] = array(
    'title' => 'Nivo Slider',
    'website' => 'https://github.com/gilbitron/Nivo-Slider',
    'version' => '3.2',
    'js' => array(
      $nivo_slider_path . '/jquery.nivo.slider.pack.js' => array(),
    ),
    'css' => array(
      $nivo_slider_path . '/nivo-slider.css' => array(),
      $nivo_slider_path . '/themes/default/default.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );


  $sceditor_path = libraries_get_path('sceditor');
  $libraries['sceditor'] = array(
    'title' => 'sceditor',
    'website' => 'http://www.sceditor.com',
    'version' => '1.4.4',
    'js' => array(
      $sceditor_path . '/minified/jquery.sceditor.min.js' => array(),
      $sceditor_path . '/languages/ru.js' => array(),
    ),
    'css' => array(
      $sceditor_path . '/minified/themes/default.min.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  $libraries['jquery_localscroll'] = array(
    'title' => 'Jquery Localscroll',
    'website' => 'http://flesler.blogspot.com',
    'version' => '1.2.7',
    'js' => array(
      libraries_get_path('jquery_localscroll') . '/jquery.localscroll-1.2.7-min.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  $libraries['jquery_scrollto'] = array(
    'title' => 'Jquery Scrollto',
    'website' => 'http://flesler.blogspot.com',
    'version' => '1.4.3.1',
    'js' => array(
      libraries_get_path('jquery_scrollto') . '/jquery.scrollTo-1.4.3.1-min.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  $fancybox_path = libraries_get_path('fancybox');
  $libraries['fancybox'] = array(
    'title' => 'fancybox',
    'website' => 'http://fancyapps.com',
    'version' => '2.1.5',
    'js' => array(
      $fancybox_path . '/lib/jquery.mousewheel-3.0.6.pack.js' => array(),
      $fancybox_path . '/source/jquery.fancybox.pack.js' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-buttons.js' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-media.js' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-thumbs.js' => array(),
    ),
    'css' => array(
      $fancybox_path . '/source/jquery.fancybox.css' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-buttons.css' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-buttons.css' => array(),
      $fancybox_path . '/source/helpers/jquery.fancybox-thumbs.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_preprocess_page().
 */
function drupal_way_preprocess_page(&$variable) {
  $status = drupal_get_http_header('status');
  if ($status == '404 Not Found') {
    $variable['theme_hook_suggestions'][] = 'page__404';
  }

  if (arg(0) == 'contact') {
    $variable['title'] = t('Feedback');
  }

  if (arg(0) == 'comment' && arg(1) == 'reply') {
    if (isset($variable['page']['content']['system_main']['comment_node']['body']['#object']->title)) {
      $variable['title'] = $variable['page']['content']['system_main']['comment_node']['body']['#object']->title;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupal_way_preprocess_node(&$variable) {
  global $language;
  $current_path = drupal_lookup_path('alias', current_path());
  $add_comment = empty($current_path) ? current_path() : $current_path;
  $variable['add_comment'] = l(t('Add comment'), '/' . $language->prefix . '/' . $add_comment, array('fragment' => 'comment-form', 'external' => TRUE));

  if (arg(0) == 'comment' && arg(1) == 'reply') {
    $variable['title'] = NULL;
  }

  $variable['theme_hook_suggestions'][] = 'node__' . $variable['type'] . '__' . $variable['view_mode'];
}
/**
 * Implements hook_preprocess_node().
 */
function drupal_way_preprocess_field(&$variable) {
  //dsm($variable);
}
/**
 * Implements hook_preprocess_comment().
 */
function drupal_way_preprocess_comment(&$variable) {

  if ($variable['comment']->name == 'admin') {
    $variable['comment']->name = '<span class="super-user">' . t('Andrew') . '</span>';
  }

  $variable['submitted'] = '<span class="comment-autor">' . $variable['comment']->name . '</span>';
  $variable['submitted'] .= format_date($variable['comment']->created, 'comment');
  $variable['permalink'] = l('#' . $variable['comment']->cid, current_path(), array('fragment' => 'comment-' . $variable['comment']->cid));
}

/**
 * Implements hook_preprocess_block().
 */
function drupal_way_preprocess_block(&$variable) {
  if ($variable['block']->delta == 'drupal_way_node_search' && drupal_is_front_page() || $variable['block']->delta == 'drupal_way_node_search' && arg(0) == 'search') {
    $variable['block']->subject = NULL;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function drupal_way_form_search_form_alter(&$form, &$form_state, $form_id) {
  unset($form['basic']['keys']['#title']);
  $form['#prefix'] = '<div class="search-form-wrapper">';
  $form['#suffix'] = '</div>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function drupal_way_form_fivestar_custom_widget_alter(&$form, &$form_state, $form_id) {
  $form['fivestar_submit']['#type'] = 'hidden';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function drupal_way_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['name']['#prefix'] = '<div class="contact-form-info">';
  $form['subject']['#suffix'] = '</div>';
  $form['copy']['#access'] = TRUE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function drupal_way_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $block = block_load('block', 17);
  $block = _block_get_renderable_array(_block_render_blocks(array($block)));
  $block = render($block);

  $form['author']['#prefix'] = '<div class="comment-autor-info">' . $block;
  $form['author']['#suffix'] = '<div class="comment-form-des form-item"><div class="description">' . t('The content of E-mail field is kept private and will not be shown publicly.') . $form['author']['mail']['#description'] . '</div></div></div>';
  $form['author']['mail']['#description'] = NULL;
  $form['author']['homepage']['#access'] = FALSE;
  $form['comment_body'][LANGUAGE_NONE][0]['#title'] = NULL;
  $form['author']['name']['#maxlength'] = 25;
  $form['comment_body']['#after_build'][] = 'drupal_way_customize_comment_format';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function drupal_way_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);
  if ($form_id == 'views_exposed_form' && arg(0) != 'search' && arg(0) != 'demo') {
    $form['reset']['#access'] = FALSE;
    $form['submit']['#type'] = 'image_button';
    $form['submit']['#src'] = drupal_get_path('theme', 'drupal_way') . '/images/search-icon.png';
  }
}

/**
 * Implements helper function
 */
function drupal_way_customize_comment_format(&$form) {
  $form[LANGUAGE_NONE][0]['value']['#resizable'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['help']['#access'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_token_info().
 */
function drupal_way_token_info() {
  $info['tokens']['node']['logo_image'] = array(
    'name' => t('Logo Image'),
    'description' => t('Returns the Logo image'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function drupal_way_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    if (isset($tokens['logo_image'])) {
      $theme_default = variable_get('theme_default');
      $theme_settings = variable_get('theme_' . $theme_default . '_settings');
      global $base_root;
      $replacements[$tokens['logo_image']] = $base_root . '/' . $theme_settings['logo_path'];
    }
  }

  return $replacements;
}

/**
 * Implements hook_block_info().
 */
function drupal_way_block_info() {
  $blocks['drupal_way_mob_menu'] = array('info' => t('Mob Menu'));
  $blocks['drupal_way_footer_menu'] = array('info' => t('Footer Menu'));
  $blocks['drupal_way_node_search'] = array('info' => t('Node Search'));
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function drupal_way_block_view($delta = '') {
  $block = array();

  if ($delta == 'drupal_way_mob_menu') {
    $block['content'] = drupal_way_mob_menu();
  }

  if ($delta == 'drupal_way_footer_menu') {
    $block['content'] = drupal_way_footer_menu();
  }

  if ($delta == 'drupal_way_node_search') {
    $block['content'] = module_invoke('views', 'block_view', '-exp-node_search-page');
  }

  return $block;
}

function drupal_way_mob_menu() {
  $menu_tree = menu_tree_all_data('main-menu');

  $output = '<div id="mob-menu">';

  if (!empty($menu_tree)) {
    global $language;
    foreach ($menu_tree as $menu) {
      if ($menu['link']['language'] == $language->prefix || $menu['link']['language'] == LANGUAGE_NONE) {
        $output .= '<div class="menu-mob-title">' . l($menu['link']['link_title'], $menu['link']['link_path']) . '</div><div>';
        $output .= '<div>' . l($menu['link']['link_title'], $menu['link']['link_path']) . '</div>';
        if (!empty($menu['below'])) {
          drupal_way_mob_menu_below($menu['below'], $output);
        }
        $output .= '</div>';
      }
    }
  }

  $output .= '</div>';

  return $output;
}

function drupal_way_mob_menu_below($menu, &$output) {
  foreach ($menu as $menu_items) {
    $output .= '<div>' . l($menu_items['link']['link_title'], $menu_items['link']['link_path']) . '</div>';
    if (!empty($menu_items['below'])) {
      drupal_way_mob_menu_below($menu_items['below'], $output);
    }
    else {
      //$output .= '</div>';
    }
  }
}


function drupal_way_footer_menu() {
  return menu_navigation_links('footer-menu');
}

function drupal_way_front_gallery($results = NULL) {
  $output = '';

  if (!empty($results)) {
    foreach ($results as $result) {
      if (isset($result->_field_data['nid']['entity'])) {
        $output .= '<div id="' . $result->_field_data['nid']['entity']->type . '-' .  $result->_field_data['nid']['entity']->nid . '" class="nivo-html-caption">';
      }

      if (isset($result->field_field_gallery_body[0]['rendered']['#markup'])) {
        $output .= $result->field_field_gallery_body[0]['rendered']['#markup'];
      }

      if (isset($result->_field_data['nid']['entity']) && isset($result->field_field_gallery_body[0]['rendered']['#markup'])) {
        $output .= '</div>';
      }
    }
  }

  return $output;
}
/**
 * Implements hook_field_extra_fields().
 */
function drupal_way_field_extra_fields() {
  return array(
    'node' => array(
      'drupal_how_to' => array(
        'display' => array(
          'drupal_how_to_content_summury' => array(
            'label' => t('Content summury'),
            'description' => t('Content summury'),
            'weight' => 0,
          ),
          'drupal_how_to_mobile_image_full' => array(
            'label' => t('Mobile image full'),
            'description' => t('Mobile image full'),
            'weight' => 0,
          ),
          'drupal_how_to_search_body' => array(
            'label' => t('Search Resultl Body'),
            'description' => t('Search Result Body'),
            'weight' => 0,
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function drupal_way_node_view($node, $view_mode, $langcode) {
  $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  $body = field_get_items('node', $node, 'body');
  if (isset($extra_fields['drupal_how_to_content_summury']) && $extra_fields['drupal_how_to_content_summury']['visible'] && isset($body[0]['summary']) && !empty($body[0]['summary'])) {
    $content_summury = field_view_field('node', $node, 'body', array(
      'label'=>'hidden',
      'type' => 'text_summary_or_trimmed',
      'settings'=>array('trim_length' => 100000),
      'weight' => $extra_fields['drupal_how_to_content_summury']['weight'],
    ));
    $node->content['drupal_how_to_content_summury'] = array($content_summury);
  }
  if (isset($extra_fields['drupal_how_to_mobile_image_full']) && $extra_fields['drupal_how_to_mobile_image_full']['visible']) {
    $image = field_get_items('node', $node, 'field_druapl_how_to_img_full');
    if (isset($image[0]['uri'])) {
      $node->content['drupal_how_to_mobile_image_full'] = array(
        '#markup' => '<a class="fancybox mobile-image-full" alt="' . $image[0]['alt'] . '" title="' . $image[0]['title'] . '" href="' . file_create_url($image[0]['uri']) . '">' . t('Image to this article') . '</a>',
        '#weight' => $extra_fields['drupal_how_to_mobile_image_full']['weight'],
      );
    }
  }

  if ($view_mode == 'search_result' && isset($extra_fields['drupal_how_to_search_body']) && $extra_fields['drupal_how_to_search_body']['visible']) {
    $field_body = field_get_items('node', $node, 'body');
    $body = '';
    if (isset($field_body[0]['value'])) {
      $body = strip_tags($field_body[0]['value'], '<a><br><strong><u><em>');
      $body = views_trim_text(array(
        'max_length' => 450,
        'word_boundary' => TRUE,
        'html' => TRUE,
      ), $body);
    }
    $node->content['drupal_how_to_search_body'] = array(
      '#markup' => $body,
      '#weight' => $extra_fields['drupal_how_to_search_body']['weight'],
    );
  }
}
